/* automatically generated by rust-bindgen */


#![allow(non_snake_case)]


#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IndirectUsage<T, U> {
    pub member1: IndirectUsage_Typedefed<T>,
    pub member2: IndirectUsage_Aliased<U>,
    _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
    _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<U>>,
}
pub type IndirectUsage_Typedefed<T> = T;
pub type IndirectUsage_Aliased<U> = U;
impl <T, U> Default for IndirectUsage<T, U> {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
